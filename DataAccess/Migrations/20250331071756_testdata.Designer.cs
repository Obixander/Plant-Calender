// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250331071756_testdata")]
    partial class testdata
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Plant", b =>
                {
                    b.Property<int>("PlantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlantId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("HarvestTime")
                        .HasColumnType("date");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatinName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("MoveTime")
                        .HasColumnType("date");

                    b.Property<DateOnly>("PlantingDate")
                        .HasColumnType("date");

                    b.HasKey("PlantId");

                    b.ToTable("Plants");

                    b.HasData(
                        new
                        {
                            PlantId = 1,
                            Description = "A red, edible fruit often used in salads and cooking.",
                            EnglishName = "Tomato",
                            Family = "Solanaceae",
                            HarvestTime = new DateOnly(2024, 7, 15),
                            Image = "tomato.jpg",
                            LatinName = "Solanum lycopersicum",
                            MoveTime = new DateOnly(2024, 5, 1),
                            PlantingDate = new DateOnly(2024, 3, 1)
                        },
                        new
                        {
                            PlantId = 2,
                            Description = "A root vegetable, usually orange in color.",
                            EnglishName = "Carrot",
                            Family = "Apiaceae",
                            HarvestTime = new DateOnly(2024, 8, 30),
                            Image = "carrot.jpg",
                            LatinName = "Daucus carota",
                            MoveTime = new DateOnly(2024, 5, 20),
                            PlantingDate = new DateOnly(2024, 4, 10)
                        },
                        new
                        {
                            PlantId = 3,
                            Description = "A leafy green vegetable often used in salads.",
                            EnglishName = "Lettuce",
                            Family = "Asteraceae",
                            HarvestTime = new DateOnly(2024, 5, 10),
                            Image = "lettuce.jpg",
                            LatinName = "Lactuca sativa",
                            MoveTime = new DateOnly(2024, 3, 20),
                            PlantingDate = new DateOnly(2024, 2, 15)
                        },
                        new
                        {
                            PlantId = 4,
                            Description = "A fragrant herb used in cooking, especially in Italian cuisine.",
                            EnglishName = "Basil",
                            Family = "Lamiaceae",
                            HarvestTime = new DateOnly(2025, 4, 15),
                            Image = "basil.jpg",
                            LatinName = "Ocimum basilicum",
                            MoveTime = new DateOnly(2025, 3, 20),
                            PlantingDate = new DateOnly(2025, 3, 5)
                        },
                        new
                        {
                            PlantId = 5,
                            Description = "A sweet red fruit often eaten fresh or used in desserts.",
                            EnglishName = "Strawberry",
                            Family = "Rosaceae",
                            HarvestTime = new DateOnly(2025, 4, 30),
                            Image = "strawberry.jpg",
                            LatinName = "Fragaria × ananassa",
                            MoveTime = new DateOnly(2025, 3, 25),
                            PlantingDate = new DateOnly(2025, 3, 10)
                        },
                        new
                        {
                            PlantId = 6,
                            Description = "A leafy green vegetable rich in iron and vitamins.",
                            EnglishName = "Spinach",
                            Family = "Amaranthaceae",
                            HarvestTime = new DateOnly(2025, 5, 10),
                            Image = "spinach.jpg",
                            LatinName = "Spinacia oleracea",
                            MoveTime = new DateOnly(2025, 4, 15),
                            PlantingDate = new DateOnly(2025, 4, 1)
                        });
                });

            modelBuilder.Entity("Entities.PlantPlot", b =>
                {
                    b.Property<int>("PlantPlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlantPlotId"));

                    b.Property<DateTime>("LastFertilized")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastWatered")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.HasKey("PlantPlotId");

                    b.HasIndex("PlantId");

                    b.ToTable("Plantplots");
                });

            modelBuilder.Entity("Entities.PlantPlotHistory", b =>
                {
                    b.Property<int>("PlantPlotHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlantPlotHistoryId"));

                    b.Property<string>("History")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlantPlotId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("PlantPlotHistoryId");

                    b.HasIndex("PlantPlotId");

                    b.ToTable("PlantPlotHistories");
                });

            modelBuilder.Entity("Entities.PlantPlot", b =>
                {
                    b.HasOne("Entities.Plant", "Plant")
                        .WithMany()
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("Entities.PlantPlotHistory", b =>
                {
                    b.HasOne("Entities.PlantPlot", "PlantPlot")
                        .WithMany("History")
                        .HasForeignKey("PlantPlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlantPlot");
                });

            modelBuilder.Entity("Entities.PlantPlot", b =>
                {
                    b.Navigation("History");
                });
#pragma warning restore 612, 618
        }
    }
}
